#version 450
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : require
const float M_PI = 3.1415926538;

struct Material {
    vec3 color;
    float metallic;
    float roughness;
    int albedo_tex_id;
    int metallic_roughness_tex_id;
    int normal_tex_id;
};

struct Camera_data {
    mat4 projection;
    mat4 view;
    mat4 invView;
};

struct Object_data {
    mat4 world_matrix;
    mat4 normal_matrix;
    uint material_offset;
    vec3 padding;
};

struct Light {
    vec4 color;
    vec3 pos;
    uint Type;
    vec3 orienation;
    uint offset;
};

layout(buffer_reference, std430) readonly buffer ObjectBuffer {
    Object_data data[];
};
layout(buffer_reference, std430) readonly buffer MaterialBuffer {
    Material data[];
};
layout(buffer_reference, std430) readonly buffer CameraBuffer {
    Camera_data data[];
};
layout(buffer_reference, std430) readonly buffer LightBuffer {
    Light data[];
};

// layout(set = 0, binding = 0) uniform sampler2D textures[1000];

// layout(set = 0, binding = 1) uniform samplerCube samplerCubeMap;

layout(set = 0, binding = 0) uniform sampler2D albedo_mettalic_texture;
layout(set = 0, binding = 1) uniform sampler2D normal_roughness_texture;
layout(set = 0, binding = 2) uniform sampler2D depth_texture;

layout(set = 0, binding = 3, rgba8) uniform writeonly image2D output_texture;

layout(push_constant) uniform constants {
    ObjectBuffer objBuffer;
    MaterialBuffer matBuffer;
    CameraBuffer camBuffer;
    LightBuffer lightBuffer;
    uint camera_id;
    uint nbLight;
}
pc;

// http://www.thetenthplanet.de/archives/1180

float dotClamp(vec3 v1, vec3 v2) {
    return clamp(dot(v1, v2), 0.0, 1.0);
}

//////////////////////////////////////////////////////////////////////////
// BRDF from LearnOpenGL
//////////////////////////////////////////////////////////////////////////

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = M_PI * denom * denom;

    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float num = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 LearnOpenGLBRDF(vec3 albedo, vec2 metal_roughnss, vec3 N, vec3 V, vec3 L, vec3 lightColor) {
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metal_roughnss.r);
    vec3 H = normalize(V + L);

    float NDF = DistributionGGX(N, H, metal_roughnss.g);
    float G = GeometrySmith(N, V, L, metal_roughnss.g);
    vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metal_roughnss.r;

    vec3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
    vec3 specular = numerator / denominator;

    // add to outgoing radiance Lo
    float NdotL = max(dot(N, L), 0.0);

    return (kD * albedo / M_PI + specular) * lightColor * NdotL;
}
//////////////////////////////////////////////////////////////////////////
// hemisphere sampling
//////////////////////////////////////////////////////////////////////////

// Converts a color from linear light gamma to sRGB gamma
vec4 fromLinear(vec4 linearRGB) {
    bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));
    vec3 higher = vec3(1.055) * pow(linearRGB.rgb, vec3(1.0 / 2.4)) - vec3(0.055);
    vec3 lower = linearRGB.rgb * vec3(12.92);

    return vec4(mix(higher, lower, cutoff), linearRGB.a);
}

const float z_near = 0.1f;
const float z_far = 10.0f;

float unprojectDepth(float depth, float near, float far) {
    return near * far / (far - depth * (far - near));
}

vec3 reconstructWorldPos(vec2 fragCoord, float depth, mat4 projection, mat4 view) {
    // 0..1 → -1..1
    vec2 ndc;
    ndc.x = fragCoord.x * 2.0 - 1.0;
    ndc.y = fragCoord.y * 2.0 - 1.0;
    ndc.y *= -1.0; // Invert Y for Vulkan

    float z_ndc = depth;

    // Position en clip space
    vec4 clip = vec4(ndc, z_ndc, 1.0);

    // Inverse VP
    mat4 invVP = inverse(projection * view);

    // Homogeneous → World
    vec4 world = invVP * clip;
    world /= world.w;

    return world.xyz;
}

//////////////////////////////////////////////////////////////////////////
// Main
//////////////////////////////////////////////////////////////////////////

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
    // t *= 2;
    vec4 albedo_metalic = texelFetch(albedo_mettalic_texture, pixel_pos, 0);
    vec4 normal_roughness = texelFetch(normal_roughness_texture, pixel_pos, 0);
    float depth = texelFetch(depth_texture, pixel_pos, 0).r;

    Camera_data cam = pc.camBuffer.data[0];
    vec2 sample_uv = (vec2(pixel_pos) + vec2(0.5)) / vec2(imageSize(output_texture));
    vec3 wpos = reconstructWorldPos(sample_uv, depth, cam.projection, cam.view);

    vec3 albedo = albedo_metalic.rgb;
    vec3 normal  = normal_roughness.rgb;
    vec2 metal_roughness = vec2(albedo_metalic.w, normal_roughness.w);
    // vec3 albedo = vec3(1,1,1);
    // if(depth == 1.0) return;
    vec3 cameraPos = cam.invView[3].xyz;
    vec3 view = normalize(cameraPos - wpos);

    vec3 lightDir = normalize(vec3(1., 1, 1));

    // vec3 color = vec3(0.0);

    // // metalRoughness.g = max(0.01, metalRoughness.g); ;

    // vec3 diffuse_lightDir = surfaceNormal;
    // vec3 reflect_lightDir = surfaceNormal;

    // vec4 diffuse_cubeMapColor =
    //     textureLod(samplerCubeMap, diffuse_lightDir, pow(textureQueryLevels(samplerCubeMap), max(metalRoughness.g + 0.2, 1.f)));
    // vec4 reflect_cubeMapColor = textureLod(samplerCubeMap, reflect_lightDir, pow(textureQueryLevels(samplerCubeMap), metalRoughness.g));

    // vec3 color_difuse = LearnOpenGLBRDF(albedo, metal_roughness.r, metal_roughness.g, normal, view, lightDir, vec3(2, 2, 2));
    vec3 color_difuse = vec3(0);
    // color_difuse += LearnOpenGLBRDF(albedo, metal_roughness, normal, view, lightDir, vec3(2, 2, 2));
    vec3 lightColor;
    for (int i = 0; i < pc.nbLight; i++) {
        Light l = pc.lightBuffer.data[i];

        if (l.Type == 0) {
            lightDir = normalize(-l.orienation);
            lightColor = l.color.rgb * l.color.w;
        } else if (l.Type == 1) {
            lightDir = normalize(l.pos - wpos);

            lightColor = l.color.rgb * l.color.w * (1.0 / pow(distance(l.pos, wpos), 2));
        }

        color_difuse += LearnOpenGLBRDF(albedo, metal_roughness, normal, view, lightDir, lightColor);
    }

    vec3 final_color;
    if (depth != 1.0) {
        final_color = color_difuse + vec3(0.03) * albedo;
    } else {
        final_color = albedo;
    }

    vec2 ndc;
    ndc.x = sample_uv.x * 2.0 - 1.0;
    ndc.y = sample_uv.y * 2.0 - 1.0;
    ndc.y *= -1.0; // Invert Y for Vulkan
    vec4 clip = vec4(ndc, depth , 1.0);

    imageStore(output_texture, pixel_pos, vec4(normal, 1));
    // // BRDFResults res = DisneyBRDF(textColor.rgb, metalRoughness.r, metalRoughness.g, surfaceNormal, view, lightDir);
    // // color += ((res.diffuse + res.specular) * cubeMapColor.rgb);

    // vec3 color_difuse =
    //     LearnOpenGLBRDF(textColor.rgb, metalRoughness.r, metalRoughness.g, surfaceNormal, view, diffuse_lightDir,
    //     diffuse_cubeMapColor.rgb);
    // vec3 color_reflect = LearnOpenGLBRDF(textColor.rgb, metalRoughness.r, metalRoughness.g, surfaceNormal, view, reflect_lightDir,
    // reflect_cubeMapColor.rgb );

    // color += vec3(0.03) * textColor.rgb;
    // color += mix(color_reflect, color_difuse , metalRoughness.r);
}
